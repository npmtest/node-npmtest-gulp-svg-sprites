{"/home/travis/build/npmtest/node-npmtest-gulp-svg-sprites/test.js":"/* istanbul instrument in package npmtest_gulp_svg_sprites */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-svg-sprites/lib.npmtest_gulp_svg_sprites.js":"/* istanbul instrument in package npmtest_gulp_svg_sprites */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_svg_sprites = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_svg_sprites = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-svg-sprites/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-svg-sprites && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_svg_sprites */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_svg_sprites\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_svg_sprites.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_svg_sprites.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_svg_sprites.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_svg_sprites.__dirname + '/lib.npmtest_gulp_svg_sprites.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-svg-sprites/node_modules/gulp-svg-sprites/index.js":"var SpriteData = require(\"svg-sprite-data\");\nvar through2   = require(\"through2\");\nvar gutil      = require(\"gulp-util\");\nvar File       = gutil.File;\nvar fs         = require(\"fs\");\nvar Q          = require(\"q\");\nvar _          = require(\"lodash\");\nvar path       = require(\"path\");\n\nvar PLUGIN_NAME = \"gulp-svg-sprites\";\n\n/**\n * @module gulp-svg-sprite.options\n * Default configuration. Everything here can be overridden\n */\nvar defaults = {\n    /**\n     *\n     * Define which mode to run in. Can be either \"sprite\", \"defs\" or \"symbols\"\n     *\n     * @property mode\n     * @type String\n     * @default sprite\n     */\n    mode: \"sprite\",\n    /**\n     *\n     * By default, the class `icon` will be used as the common class.\n     * but you can also choose your own\n     *\n     * @property common\n     * @type String\n     * @default icon\n     */\n    common:    \"icon\",\n    /**\n     *\n     * Easily add prefixes/suffixes to the generated CSS classnames. The `%f` will\n     * be replaced by the filename\n     *\n     * @property selector\n     * @type String\n     * @default %f\n     */\n    selector:  \"%f\",\n    /**\n     *\n     * Define the layout of the items in the sprite. Can be either\n     * \"vertical\", \"horizontal\" or \"diagonal\"\n     *\n     * @property layout\n     * @type String\n     * @default vertical\n     */\n    layout:    \"vertical\",\n    /**\n     *\n     * In `symbols` or `defs` mode, you'll probably want to override the ID on each element.\n     * The filename will be used as a default, but can be overridden.\n     *\n     * @property svgId\n     * @type String\n     * @default %f\n     */\n    svgId:     \"%f\",\n    /**\n     *\n     * Define the path & filename of the CSS file. Using this, you could easily create a SASS\n     * partial for example\n     *\n     * @property cssFile\n     * @type String\n     * @default css/sprite.css\n     */\n    cssFile:   \"css/sprite.css\",\n\n    /**\n     *\n     * Define the path to the SVG file that be written to the CSS file. Note: this does NOT alter\n     * the actual write-path of the SVG file. See the `svg` option for that.\n     *\n     * @property svgPath\n     * @type String\n     * @default ../%f\n     */\n    svgPath:   \"../%f\",\n    /**\n     *\n     * If you're creating a PNG fallback, define the path to it that be written to the CSS file.\n     *\n     * @property pngPath\n     * @type String\n     * @default ../%f\n     */\n    pngPath:   \"../%f\",\n    /**\n     *\n     * Paths to preview files.\n     *\n     * @property preview\n     * @type Object\n     * @param {String} [sprite=sprite.html]\n     * @param {String} [defs=defs.html]\n     * @param {String} [symbols=symbols.html]\n     */\n    preview: {\n        sprite:  \"sprite.html\",\n        defs:    \"defs.html\",\n        symbols: \"symbols.html\"\n      },\n    /**\n     *\n     * Paths to SVG files.\n     *\n     * @property svg\n     * @type Object\n     * @param {String} [sprite=svg/sprite.svg]\n     * @param {String} [defs=svg/defs.svg]\n     * @param {String} [symbols=svg/symbols.svg]\n     */\n    svg: {\n        sprite:  \"svg/sprite.svg\",\n        defs:    \"svg/defs.svg\",\n        symbols: \"svg/symbols.svg\"\n      },\n    refSize: 26,\n    /**\n     *\n     * Add padding to sprite items\n     *\n     * @property padding\n     * @type Number\n     * @default 0\n     */\n    padding: 0,\n    dims: true,\n    hideSvg: true,\n    /**\n     *\n     * Use async transforms\n     *\n     * @property asyncTransforms\n     * @type Boolean\n     * @default false\n     */\n    asyncTransforms: false,\n    /**\n     *\n     * Set the base font-size for the icon element\n     *\n     * @property baseSize\n     * @type Number\n     * @default 10\n     */\n    baseSize: 10,\n    /**\n     *\n     * Override the default data transforms\n     *\n     * @property transformData\n     * @type Function\n     * @default transformData\n     */\n    transformData: transformData,\n    /**\n     *\n     * Apply additional data transforms AFTER the defaults\n     *\n     * @property afterTransform\n     * @type Function\n     * @default afterTransform\n     */\n    afterTransform: function(data, config, done) {\n        if (config.asyncTransforms) {\n          return done(data);\n        }\n        return data;\n      }\n  };\n\n/**\n * Default templates, can be overridden by supplying the same keys in the\n * templates: { } option\n */\nvar templatePaths = {\n    css:            \"/tmpl/sprite.css\",\n    scss:           \"/tmpl/sprite.scss\",\n    defs:           \"/tmpl/defs.svg\",\n    symbols:        \"/tmpl/symbols.svg\",\n    previewSprite:  \"/tmpl/preview.html\",\n    previewDefs:    \"/tmpl/preview-defs.html\",\n    previewSymbols: \"/tmpl/preview-symbol.html\"\n  };\n\n/**\n * Use user-provided templates first, defaults as fallback\n * @param {Object} config\n * @returns {Object}\n */\nfunction getTemplates(config) {\n\n  var templates = {};\n\n  Object.keys(templatePaths).forEach(function(key) {\n      if (config.templates && (config.templates[key] && config.templates[key] !== true)) {\n        templates[key] = config.templates[key];\n      } else {\n        templates[key] = fs.readFileSync(__dirname + templatePaths[key], \"utf-8\");\n      }\n    });\n\n  return templates;\n}\n\n/**\n * Any last-minute data transformations before handing off to templates,\n * can be overridden by supplying a 'transformData' option\n * @param data\n * @param config\n * @returns {*}\n */\nfunction transformData(data, config, done) {\n\n  data.baseSize = config.baseSize;\n\n  data.svgPath = config.svgPath.replace(\"%f\", config.svg.sprite);\n  data.pngPath = config.pngPath.replace(\"%f\", config.svg.sprite.replace(/\\.svg$/, \".png\"));\n\n  data.svg = data.svg.map(function(item) {\n\n      item.relHeight = item.height / config.baseSize;\n      item.relWidth  = item.width / config.baseSize;\n\n      item.relPositionX = item.positionX / config.baseSize - config.padding / config.baseSize;\n      item.relPositionY = item.positionY / config.baseSize - config.padding / config.baseSize;\n      item.normal = true;\n\n      if (item.name.match(/~/g)) {\n        if (config.mode !== \"sprite\") {\n          return false;\n        } else {\n          var segs  = item.name.split(\"~\");\n          item.name = item.selector[0].expression + \":\" + segs[1];\n          item.normal = false;\n        }\n      } else {\n        item.name = item.selector[0].expression;\n      }\n\n      return item;\n    });\n\n  data.svg = data.svg.filter(function(item) { return item; });\n\n  data.relWidth  = data.swidth / config.baseSize;\n  data.relHeight = data.sheight / config.baseSize;\n\n  if (config.asyncTransforms) {\n    return done(data);\n  }\n  return data;\n}\n\n/**\n * Helper for correct plugin errors\n * @param context\n * @param msg\n */\nfunction error(context, msg) {\n  context.emit(\"error\", new gutil.PluginError(PLUGIN_NAME, msg));\n}\n\n/**\n * @param stream\n * @param config\n * @param svg\n * @param data\n * @param cb\n */\nfunction writeFiles(stream, config, svg, data, cb) {\n\n  var temps = getTemplates(config);\n\n  data.config = config;\n\n  var promises = [];\n\n  if (!config.svg) {\n    cb(null);\n  }\n\n  // Create SVG sprite\n  if (config.mode === \"sprite\") {\n\n    stream.push(new File({\n        cwd:  \"./\",\n        base: \"./\",\n        path: config.svg.sprite,\n        contents: new Buffer(svg)\n      }));\n\n    var cssFile = config.cssFile;\n\n    if (config) {\n      if (config.templates && config.templates.scss) {\n        cssFile = path.extname(cssFile) === \".css\" ? cssFile.replace(\".css\", \".scss\") : cssFile;\n      }\n      var tpl = config.templates && config.templates.scss ? temps.scss : temps.css;\n      promises.push(makeFile(tpl, cssFile, stream, data));\n    }\n\n    if (config.preview && config.preview.sprite) {\n      if (config.templates && config.templates.scss) {\n        cssFile = path.extname(cssFile) === \".scss\" ? cssFile.replace(\".scss\", \".css\") : cssFile;\n        promises.push(makeFile(temps.css, cssFile, stream, data));\n      }\n      promises.push(makeFile(temps.previewSprite, config.preview.sprite, stream, data));\n    }\n\n    return Q.all(promises).then(cb.bind(null, null));\n  }\n\n  var template = \"defs\";\n  var preview  = \"previewDefs\";\n\n  if (config.mode === \"symbols\") {\n    template = \"symbols\";\n    preview  = \"previewSymbols\";\n  }\n\n  makeFile(temps[template], config.svg[template], stream, data).then(function(output) {\n\n      data.svgInline = output;\n\n      if (config.preview && config.preview[config.mode]) {\n        promises.push(makeFile(temps[preview], config.preview[template], stream, data));\n        Q.all(promises).then(cb);\n      } else {\n        cb(null);\n      }\n    });\n}\n\n/**\n * @param template\n * @param fileName\n * @param stream\n * @param data\n * @returns {Promise.promise|*}\n */\nfunction makeFile(template, fileName, stream, data) {\n\n  var deferred = Q.defer();\n  var id = _.uniqueId();\n  var out = \"\";\n\n  try {\n    var compiled = _.template(template);\n    out = compiled(data);\n  }catch (e) {\n    deferred.reject(e);\n    return deferred.promise;\n  }\n\n  stream.push(new File({\n      cwd:  \"./\",\n      base: \"./\",\n      path: fileName,\n      contents: new Buffer(out)\n    }));\n\n  deferred.resolve(out);\n\n  return deferred.promise;\n}\n\n/**\n * @returns {Function}\n */\nmodule.exports = function(config) {\n\n    config = _.merge(_.cloneDeep(defaults), config || {});\n\n    // Backwards compatibility\n    if (typeof config.svgFile === \"string\") {\n      config.svg.sprite = config.svgFile;\n    }\n    if (config.unit) {\n      config.padding = config.unit;\n    }\n\n    if (config.mode === \"defs\" || config.mode === \"symbols\") {\n      config.inline = true;\n    } else {\n      config.inline = false;\n    }\n\n    var spriter = new SpriteData(config);\n\n    return through2.obj(function(file, enc, cb) {\n\n        spriter.add(file.path, file.contents.toString());\n\n        cb(null);\n\n      }, function(cb) {\n\n        var stream = this;\n\n        spriter.compile(config, function(err, svg) {\n            var onDoneAfterTransformData = function(data) {\n                writeFiles(stream, config, svg.svg, data, cb.bind(null, null));\n              };\n\n            var onDoneTransformData = function(data) {\n                config.afterTransform(data, config, onDoneAfterTransformData);\n              };\n\n            if (config.asyncTransforms) {\n              config.transformData(svg.data, config, onDoneTransformData);\n            } else {\n              // Get data\n              var data = config.transformData(svg.data, config);\n              data = config.afterTransform(data, config);\n              writeFiles(stream, config, svg.svg, data, cb.bind(null, null));\n            }\n          });\n      });\n  };\n","/home/travis/build/npmtest/node-npmtest-gulp-svg-sprites/node_modules/gulp-svg-sprites/gulpfile.js":"var gulp = require(\"gulp\");\nvar jshint = require(\"gulp-jshint\");\nvar contribs = require(\"gulp-contribs\");\nvar clean = require(\"gulp-clean\");\n\ngulp.task(\"clean:output\", function() {\n  return gulp.src(\"test/fixtures/output\", {read: false})\n    .pipe(clean());\n});\n\nrequire(\"./examples/gulpfile.basic\");\nrequire(\"./examples/gulpfile.basic-scss\");\nrequire(\"./examples/gulpfile.options\");\nrequire(\"./examples/gulpfile.scss\");\nrequire(\"./examples/gulpfile.defs\");\nrequire(\"./examples/gulpfile.symbols\");\n\ngulp.task(\"lint\", function() {\n  gulp.src([\"test/specs/**/*.js\", \"!test/fixtures/**\", \"index.js\"])\n    .pipe(jshint(\"test/specs/.jshintrc\"))\n    .pipe(jshint.reporter(\"default\"))\n    .pipe(jshint.reporter(\"fail\"));\n});\n\ngulp.task(\"contribs\", function() {\n  gulp.src(\"README.md\")\n    .pipe(contribs())\n    .pipe(gulp.dest(\"./\"));\n});\n\ngulp.task(\"default\", [\"lint\"]);\n\ngulp.task(\"docs\", function() {\n\n  var yuidoc = require(\"gulp-yuidoc\");\n\n  gulp.src([\"./index.js\"])\n    .pipe(yuidoc.parser({spaces: 4}))\n    .pipe(gulp.dest(\"./doc\"));\n});\n","/home/travis/build/npmtest/node-npmtest-gulp-svg-sprites/node_modules/gulp-svg-sprites/_makeDocs.js":"var fs           = require(\"fs\");\nvar cp           = require(\"child_process\");\nvar doc          = \"./doc/yuidoc.json\";\nvar marked       = require(\"marked\");\n// var dust         = require(\"dustjs-linkedin\");\n// dust.optimizers.format = function(ctx, node) { return node; };\n\nvar mdTemp            = fs.readFileSync(\"./tmpl/readme.txt\", \"utf-8\");\nvar readme            = fs.readFileSync(\"./README.md\", \"utf-8\");\n\n/**\n * Build docs & run\n */\ncp.spawn('gulp', ['docs'], {stdio: 'inherit'}).on('close', function () {\n\n    var data = require(doc);\n\n    /**\n     * Process API\n     */\n    var options = data.classitems\n        .filter(function (item) {\n            return item.itemtype && item.itemtype === \"property\";\n        })\n        .map(function (item) {\n            if (item.subprops) {\n                item.subprops = item.subprops.map(function (sub) {\n                    sub.name = item.name + \".\" + sub.name;\n                    return sub;\n                });\n            }\n            return item;\n        })\n        .map(function (item) {\n            if (item.description) {\n                item.description = marked(item.description);\n            }\n            return item;\n        });\n\n    dust.compileFn(mdTemp, \"docs\", false);\n\n    dust.render(\"docs\", {options: options}, function (err, out) {\n\n        var newReadme = readme.replace(/(## Options\\n)([\\s\\S]+?)(\\n## License)/, function () {\n            return arguments[1] + out + arguments[3];\n        });\n\n        fs.writeFileSync(\"./README.md\", newReadme);\n    });\n});\n"}